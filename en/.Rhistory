model1 <- glmer(GistRecall ~ Generation + Item + (1|Chain), data=db, family=binomial)
summary(model1)
### Run the model ###
model1 <- glmer(GistRecall ~ Generation + Item + (1|Chain), data=db, family=binomial)
summary(model1)
# revealing a social amplification of gist distortion.
library(lmerTest)
model2 <- lmer(Pref ~ GistRecall + Generation + Item + (1|Chain), data=db)
summary(model2)
model1
model1[1]
model1[0]
summary(model1)[1]
summary(model1)[2]
summary(model1)[3]
summary(model1)[4]
summary(model1)[5]
summary(model1)[6]
summary(model1)[7]
summary(model1)[8]
summary(model1)[9]
summary(model1)[10]
summary(model1)[11]
summary(model1)[10][1]
summary(model1)[10][1][1]
summary(model1)$coefficents[1]
summary(model1)$coefficents[0]
summary(model1)$coefficents
summary(model1)$coefficients
summary(model1)$coefficients[1]
summary(model1)$coefficients[2]
summary(model1)$coefficients[5]
summary(model2)$coefficients[2]
summary(model2)
summary(model2)$coefficients
sb <- summary(model2)$coefficients[6]
sb
num <- a * b
a <- summary(model1)$coefficients[2]
sa <- summary(model1)$coefficients[5]
b <- summary(model2)$coefficients[2]
sb <- summary(model2)$coefficients[6]
num <- a * b
num
num <- a * b
den <- sqrt(a^2*sb^2 + b^2 * sa^2 + sa^2 * sb^2)
num/den
z <- num/den
2*pnorm(-abs(z))
z <- num/den
<
z
2*pnorm(-abs(z))
library(lmerTest)
model2 <- lmer(Pref ~ GistRecall + Generation + Item + (1|Chain), data=db)
summary(model2)
?rnorm
?distributions
rdbinom
rdbinom()
library(lmerTest)
model2 <- lmer(Pref ~ GistRecall + Generation + Item + (1|Chain), data=db)
summary(model2)
##################################################
### Denominator Neglect - Logistic mixed models ###
##################################################
### Settings ####
library(lme4)
options(scipen=999) # Remove scientific notation
### Load database ###
db <- read.csv("DNGLMM.csv")
db$GistRecall[db$GistRecall==1] <- 0
db$GistRecall[db$GistRecall==2] <- 1
## "So perhaps a mixed logistic model with scenarios and generation as a factor and
## distortion as a dichotomous variable (0/1) would be the more appropriate in this
## situation while adjusting for the dependency between the generation (ID cluster)." - Reviewer
### Run the model ###
model1 <- glmer(GistRecall ~ Generation + Item + (1|Chain), data=db, family=binomial)
summary(model1)
# A logistic mixed model was run with distortion as the dichotomous dependent variable,
# generation and item as fixed factors, and reproduction chain as the only random factor.
# The two items did not differ significantly, b = -0.24, SE = 0.43, p = .570, while generation
# had the expected effect, significantly reducing the probability of correct recall, b = -0.81,
# SE = 0.28, p = .004. Thus, as generations progressed, the probability of distortion increased,
# revealing a social amplification of gist distortion.
library(lmerTest)
model2 <- lmer(Pref ~ GistRecall + Generation + Item + (1|Chain), data=db)
summary(model2)
library(lmerTest)
model2 <- lmer(Pref ~ GistRecall + Generation + Item + (1|Chain), data=db)
summary(model2)
library(shiny); runApp('GitHub/cnma/cnma_app/cnma.R')
# Code to run a complete simulation
source('server/violate.R')
# Consider placing exact_rnorm in a separate file.
# R's rnorm simulates "random deviates" of the normal distribution.
# The distributions it creates may not have the specified parameters.
# exact_rnorm generates distributions matching the specified parameters.
exact_rnorm <- function(N, M, SD) {
# Taken from https://stackoverflow.com/a/18921252
norm_dist <- rnorm(n = N)
norm_dist <- M + (SD * scale(norm_dist))
# Fixing attr introduced by scale
norm_dist <- as.vector(norm_dist)
return(norm_dist)
}
# TODO: Comment run_sim
run_sim <- function(N_pop = NULL, N_sample = NULL, M = NULL, SD = NULL,
contaminations = NULL, boot = NULL,
percent_out = NULL,
max_sev_out = NULL, min_sev_out = NULL,
skew = NULL, kutosis = NULL) {
if (is.null(N_pop)) N_pop <- 10000000 # Portuguese population N
if (is.null(N_sample)) N_sample <- 30
# TODO: change for sane default after more violations are coded
if (is.null(contaminations)) contaminations <- "out"
if (is.null(M)) M <- 0 # matches rnorm default
if (is.null(SD)) SD <- 1 # matches rnorm default
if (is.null(boot)) boot <- 10000
pop <- exact_rnorm(N_pop, M, SD)
results <- data.frame(Source = character(),
Statistic = numeric(),
Estimate = numeric(),
Pvalue = numeric())
voi <- c("statistic", "estimate", "p.value")
for (i in 1:boot){
clean_data <- sample(pop, N_sample, replace = FALSE)
cont_data <- violate(N = N_sample, M = M, SD = SD, res = clean_data,
contaminations = contaminations,
percent_out = percent_out,
max_sev_out = max_sev_out,
min_sev_out = min_sev_out,
skew = skew, kurtosis = kutosis)
ttest_clean <- t.test(clean_data)
ttest_cont <- t.test(cont_data)
ttest_clean <- as.numeric(ttest_clean[voi])
ttest_cont <- as.numeric(ttest_cont[voi])
row_clean <- c('clean', ttest_clean)
row_dirty <- c('dirty', ttest_cont)
results <- rbind(results, row_clean, row_dirty)
# rbind is messing up colnames code below is required
colnames(results) <- c("Source", "Statistic", "Estimate", "Pvalue")
}
}
results
setwd("/GitHub/cnma/cnma_app/")
getwd()
setwd("GitHub/cnma/cnma_app/")
# Code to run a complete simulation
source('server/violate.R')
# Consider placing exact_rnorm in a separate file.
# R's rnorm simulates "random deviates" of the normal distribution.
# The distributions it creates may not have the specified parameters.
# exact_rnorm generates distributions matching the specified parameters.
exact_rnorm <- function(N, M, SD) {
# Taken from https://stackoverflow.com/a/18921252
norm_dist <- rnorm(n = N)
norm_dist <- M + (SD * scale(norm_dist))
# Fixing attr introduced by scale
norm_dist <- as.vector(norm_dist)
return(norm_dist)
}
# TODO: Comment run_sim
run_sim <- function(N_pop = NULL, N_sample = NULL, M = NULL, SD = NULL,
contaminations = NULL, boot = NULL,
percent_out = NULL,
max_sev_out = NULL, min_sev_out = NULL,
skew = NULL, kutosis = NULL) {
if (is.null(N_pop)) N_pop <- 10000000 # Portuguese population N
if (is.null(N_sample)) N_sample <- 30
# TODO: change for sane default after more violations are coded
if (is.null(contaminations)) contaminations <- "out"
if (is.null(M)) M <- 0 # matches rnorm default
if (is.null(SD)) SD <- 1 # matches rnorm default
if (is.null(boot)) boot <- 10000
pop <- exact_rnorm(N_pop, M, SD)
results <- data.frame(Source = character(),
Statistic = numeric(),
Estimate = numeric(),
Pvalue = numeric())
voi <- c("statistic", "estimate", "p.value")
for (i in 1:boot){
clean_data <- sample(pop, N_sample, replace = FALSE)
cont_data <- violate(N = N_sample, M = M, SD = SD, res = clean_data,
contaminations = contaminations,
percent_out = percent_out,
max_sev_out = max_sev_out,
min_sev_out = min_sev_out,
skew = skew, kurtosis = kutosis)
ttest_clean <- t.test(clean_data)
ttest_cont <- t.test(cont_data)
ttest_clean <- as.numeric(ttest_clean[voi])
ttest_cont <- as.numeric(ttest_cont[voi])
row_clean <- c('clean', ttest_clean)
row_dirty <- c('dirty', ttest_cont)
results <- rbind(results, row_clean, row_dirty)
# rbind is messing up colnames code below is required
colnames(results) <- c("Source", "Statistic", "Estimate", "Pvalue")
}
]
# Code to run a complete simulation
source('server/violate.R')
# Consider placing exact_rnorm in a separate file.
# R's rnorm simulates "random deviates" of the normal distribution.
# The distributions it creates may not have the specified parameters.
# exact_rnorm generates distributions matching the specified parameters.
exact_rnorm <- function(N, M, SD) {
# Taken from https://stackoverflow.com/a/18921252
norm_dist <- rnorm(n = N)
norm_dist <- M + (SD * scale(norm_dist))
# Fixing attr introduced by scale
norm_dist <- as.vector(norm_dist)
return(norm_dist)
}
# TODO: Comment run_sim
run_sim <- function(N_pop = NULL, N_sample = NULL, M = NULL, SD = NULL,
contaminations = NULL, boot = NULL,
percent_out = NULL,
max_sev_out = NULL, min_sev_out = NULL,
skew = NULL, kutosis = NULL) {
if (is.null(N_pop)) N_pop <- 10000000 # Portuguese population N
if (is.null(N_sample)) N_sample <- 30
# TODO: change for sane default after more violations are coded
if (is.null(contaminations)) contaminations <- "out"
if (is.null(M)) M <- 0 # matches rnorm default
if (is.null(SD)) SD <- 1 # matches rnorm default
if (is.null(boot)) boot <- 10000
pop <- exact_rnorm(N_pop, M, SD)
results <- data.frame(Source = character(),
Statistic = numeric(),
Estimate = numeric(),
Pvalue = numeric())
voi <- c("statistic", "estimate", "p.value")
for (i in 1:boot){
clean_data <- sample(pop, N_sample, replace = FALSE)
cont_data <- violate(N = N_sample, M = M, SD = SD, res = clean_data,
contaminations = contaminations,
percent_out = percent_out,
max_sev_out = max_sev_out,
min_sev_out = min_sev_out,
skew = skew, kurtosis = kutosis)
ttest_clean <- t.test(clean_data)
ttest_cont <- t.test(cont_data)
ttest_clean <- as.numeric(ttest_clean[voi])
ttest_cont <- as.numeric(ttest_cont[voi])
row_clean <- c('clean', ttest_clean)
row_dirty <- c('dirty', ttest_cont)
results <- rbind(results, row_clean, row_dirty)
# rbind is messing up colnames code below is required
colnames(results) <- c("Source", "Statistic", "Estimate", "Pvalue")
}
}
results
# Code to run a complete simulation
source('server/violate.R')
# Consider placing exact_rnorm in a separate file.
# R's rnorm simulates "random deviates" of the normal distribution.
# The distributions it creates may not have the specified parameters.
# exact_rnorm generates distributions matching the specified parameters.
exact_rnorm <- function(N, M, SD) {
# Taken from https://stackoverflow.com/a/18921252
norm_dist <- rnorm(n = N)
norm_dist <- M + (SD * scale(norm_dist))
# Fixing attr introduced by scale
norm_dist <- as.vector(norm_dist)
return(norm_dist)
}
# TODO: Comment run_sim
run_sim <- function(N_pop = NULL, N_sample = NULL, M = NULL, SD = NULL,
contaminations = NULL, boot = NULL,
percent_out = NULL,
max_sev_out = NULL, min_sev_out = NULL,
skew = NULL, kutosis = NULL) {
if (is.null(N_pop)) N_pop <- 10000000 # Portuguese population N
if (is.null(N_sample)) N_sample <- 30
# TODO: change for sane default after more violations are coded
if (is.null(contaminations)) contaminations <- "out"
if (is.null(M)) M <- 0 # matches rnorm default
if (is.null(SD)) SD <- 1 # matches rnorm default
if (is.null(boot)) boot <- 10000
pop <- exact_rnorm(N_pop, M, SD)
results <- data.frame(Source = character(),
Statistic = numeric(),
Estimate = numeric(),
Pvalue = numeric())
voi <- c("statistic", "estimate", "p.value")
for (i in 1:boot){
clean_data <- sample(pop, N_sample, replace = FALSE)
cont_data <- violate(N = N_sample, M = M, SD = SD, res = clean_data,
contaminations = contaminations,
percent_out = percent_out,
max_sev_out = max_sev_out,
min_sev_out = min_sev_out,
skew = skew, kurtosis = kutosis)
ttest_clean <- t.test(clean_data)
ttest_cont <- t.test(cont_data)
ttest_clean <- as.numeric(ttest_clean[voi])
ttest_cont <- as.numeric(ttest_cont[voi])
row_clean <- c('clean', ttest_clean)
row_dirty <- c('dirty', ttest_cont)
results <- rbind(results, row_clean, row_dirty)
# rbind is messing up colnames code below is required
colnames(results) <- c("Source", "Statistic", "Estimate", "Pvalue")
}
return(results)
}
# Setting seed for repeatable results
set.seed(123)
# run_sim runs the simulation returns one data.frame with all values
#all_values_df <- run_sim()
# run_sim's with its defaults large values takes a lot to compute
# values below are saner defaults for testing the app
all_values_df <- run_sim(N_pop = 100000, boot = 1000, N_sample = 100)
# Cohercing everything but the Source into numeric
all_values_df[ ,-1] <-  apply(all_values_df[ ,-1], 2, as.numeric)
clean_avg <- all_values_df[all_values_df$Source == 'clean', ]
clean_avg <- c('clean',
mean(clean_avg$Statistic),
mean(clean_avg$Estimate),
mean(clean_avg$Pvalue))
cont_avg <- all_values_df[all_values_df$Source == 'dirty', ]
cont_avg <- c('dirty',
mean(cont_avg$Statistic),
mean(cont_avg$Estimate),
mean(cont_avg$Pvalue))
avg_df <- rbind(clean_avg, cont_avg)
avg_df <- as.data.frame(avg_df)
colnames(avg_df) <- c("Source", "Statistic", "Estimate", "Pvalue")
View(avg_df)
View(all_values_df)
View(all_values_df)
View(avg_df)
mean(2)
View(all_values_df)
# Setting seed for repeatable results
set.seed(123)
# run_sim runs the simulation returns one data.frame with all values
#all_values_df <- run_sim()
# run_sim's with its defaults large values takes a lot to compute
# values below are saner defaults for testing the app
all_values_df <- run_sim(N_pop = 100000, boot = 1000, N_sample = 100)
# Consequences of Not Meeting Assumptions
source('server/run_sim.R')
source('server/boxPlot.R')
source('server/tableM.R')
# Setting seed for repeatable results
set.seed(123)
# run_sim runs the simulation returns one data.frame with all values
#all_values_df <- run_sim()
# run_sim's with its defaults large values takes a lot to compute
# values below are saner defaults for testing the app
all_values_df <- run_sim(N_pop = 100000, boot = 1000, N_sample = 100)
View(all_values_df)
warnings()
all_values_df[ ,-1] <-  apply(all_values_df[ ,-1], 2, as.numeric)
clean_avg <- all_values_df[all_values_df$Source == 'clean', ]
View(clean_avg)
mean(clean_avg$Statistic)
mean(c(4, "NA"))
warnings()
source('server/run_sim.R')
source('server/boxPlot.R')
source('server/tableM.R')
server <- function(input, output){
# Setting seed for repeatable results
set.seed(123)
# run_sim runs the simulation returns one data.frame with all values
#all_values_df <- run_sim()
# run_sim's with its defaults large values takes a lot to compute
# values below are saner defaults for testing the app
all_values_df <- run_sim(N_pop = 100000, boot = 1000, N_sample = 100)
}
all_values_df <- run_sim(N_pop = 100000, boot = 1000, N_sample = 100)
View(all_values_df)
warnings()
?sample()
pop <- exact_rnorm(50, 1, 0.5)
sample(pop, 100, replace = FALSE)
sample(pop, 100, replace = T)
a <- sample(pop, 100, replace = T)
t.test(a)
t.test(a)[voi]
voi <- c("statistic", "estimate", "p.value")
t.test(a)[voi]
t.test(a)[voi][1]
t.test(a)[voi][[1]]
t.test(a)[voi][1]
as.numeric(t.test(a)[voi][1])
c("clean", c("a", "b", "c"))
c <- t.test(a)[voi]
c
as.numeric(c)
c("a",as.numeric(c))
?c
c("a",as.list(as.numeric(c))
)
as.list("clean", c)
c
as.list("clean", as.numeric(c))
row_clean <- vector(mode = "list", length = 4)
row_clean[0]
row_clean[1]
as.list(c(1,2,3), "a")
as.list(c(1,2,3))
row_clean <- list('clean', as.list(ttest_clean))
c <- ttest_clean
ttest_clean <- c
c
row_clean <- list('clean', as.list(ttest_clean))
row_clean
source('server/run_sim.R')
source('server/boxPlot.R')
source('server/tableM.R')
# Setting seed for repeatable results
set.seed(123)
# run_sim runs the simulation returns one data.frame with all values
#all_values_df <- run_sim()
# run_sim's with its defaults large values takes a lot to compute
# values below are saner defaults for testing the app
all_values_df <- run_sim(N_pop = 100000, boot = 1000, N_sample = 100)
q
quit
?rbind
# Consequences of Not Meeting Assumptions
source('server/run_sim.R')
source('server/boxPlot.R')
source('server/tableM.R')
all_values_df <- run_sim(N_pop = 100000, boot = 1000, N_sample = 100)
View(all_values_df)
runApp('cnma.R')
runApp('cnma.R')
runApp('cnma.R')
# run_sim runs the simulation returns one data.frame with all values
#all_values_df <- run_sim()
# run_sim's with its defaults large values takes a lot to compute
# values below are saner defaults for testing the app
all_values_df <- run_sim(N_pop = 100000, boot = 1000, N_sample = 100)
runApp('cnma.R')
runApp('cnma.R')
?substr()
runApp('cnma.R')
runApp('cnma.R')
runApp('~/GitHub/FinantialDecisionsApp_pt-PT/en')
runApp('~/GitHub/cnma/cnma_app/cnma.R')
runApp('~/GitHub/FinantialDecisionsApp_pt-PT/en')
runApp('~/GitHub/cnma/cnma_app/cnma.R')
library(rsconnect)
rsconnect::setAccountInfo(name='enviesamentos',
token='61B840EA0A0D8DC0F466A3734DC4CC0A',
secret='tq5xjqlWHbdM447uJ+qw7TJVDUe8bSF8ChhsgC33')
deployApp("~/Github/cnma/cnma_app")
library(rsconnect)
rsconnect::setAccountInfo(name='enviesamentos',
token='61B840EA0A0D8DC0F466A3734DC4CC0A',
secret='tq5xjqlWHbdM447uJ+qw7TJVDUe8bSF8ChhsgC33')
deployApp("~/Github/cnma/cnma_app")
library(rsconnect)
rsconnect::setAccountInfo(name='enviesamentos',
token='61B840EA0A0D8DC0F466A3734DC4CC0A',
secret='tq5xjqlWHbdM447uJ+qw7TJVDUe8bSF8ChhsgC33')
deployApp("~/Github/cnma/cnma_app")
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='enviesamentos',
token='61B840EA0A0D8DC0F466A3734DC4CC0A',
secret='tq5xjqlWHbdM447uJ+qw7TJVDUe8bSF8ChhsgC33')
deployApp("~/Github/cnma/cnma_app")
runApp('~/GitHub/FinantialDecisionsApp_pt-PT/en')
"save".length
length("save")
runApp('~/GitHub/FinantialDecisionsApp_pt-PT/en')
library(rsconnect)
rsconnect::setAccountInfo(name='enviesamentos',
token='61B840EA0A0D8DC0F466A3734DC4CC0A',
secret='tq5xjqlWHbdM447uJ+qw7TJVDUe8bSF8ChhsgC33')
deployApp("~/Endividamento")
library(rsconnect)
rsconnect::setAccountInfo(name='enviesamentos',
token='61B840EA0A0D8DC0F466A3734DC4CC0A',
secret='tq5xjqlWHbdM447uJ+qw7TJVDUe8bSF8ChhsgC33')
deployApp("~/Endividamento")
getwd()
setwd("C:/Users/NatrinaG/Documents/")
library(rsconnect)
rsconnect::setAccountInfo(name='enviesamentos',
token='61B840EA0A0D8DC0F466A3734DC4CC0A',
secret='tq5xjqlWHbdM447uJ+qw7TJVDUe8bSF8ChhsgC33')
deployApp("~/Endividamento")
library(rsconnect)
rsconnect::setAccountInfo(name='enviesamentos',
token='61B840EA0A0D8DC0F466A3734DC4CC0A',
secret='tq5xjqlWHbdM447uJ+qw7TJVDUe8bSF8ChhsgC33')
deployApp("~/Endividamento/en/")
library(rsconnect)
rsconnect::setAccountInfo(name='enviesamentos',
token='61B840EA0A0D8DC0F466A3734DC4CC0A',
secret='tq5xjqlWHbdM447uJ+qw7TJVDUe8bSF8ChhsgC33')
deployApp("~/Endividamento/en")
library(rsconnect)
rsconnect::setAccountInfo(name='enviesamentos',
token='61B840EA0A0D8DC0F466A3734DC4CC0A',
secret='tq5xjqlWHbdM447uJ+qw7TJVDUe8bSF8ChhsgC33')
deployApp("~/GitHub/FinantialDecisionsApp_pt-PT/en")
shiny::runApp('GitHub/FinantialDecisionsApp_pt-PT/en')
seq(2010, 2017)
runApp('GitHub/FinantialDecisionsApp_pt-PT/en')
c(13.9, 14, 13.2, 12.6, 12.7, 13.2, 13.8)
length(c(13.9, 14, 13.2, 12.6, 12.7, 13.2, 13.8))
length(seq(2010, 2016))
runApp('GitHub/FinantialDecisionsApp_pt-PT/en')
seq(1,7)
runApp('GitHub/FinantialDecisionsApp_pt-PT/en')
